# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: GitHub Pages

on:
  # Runs on pushes targeting the default branch when md files change
  push:
    branches: ["main"]
    paths:
      - '**.md'
  schedule:
      - cron: '35 5,17 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
       TZ: Asia/Shanghai
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
        continue-on-error: true
        id: setup-pages
      - name: Log Setup Pages Error
        if: steps.setup-pages.outcome == 'failure'
        run: |
          echo "Setup Pages failed with error:" >> setup-pages-error.log
          echo "Step outcome: ${{ steps.setup-pages.outcome }}" >> setup-pages-error.log
          echo "Step conclusion: ${{ steps.setup-pages.conclusion }}" >> setup-pages-error.log
          echo "Timestamp: $(date)" >> setup-pages-error.log
          cat setup-pages-error.log
      - name: Cache Jekyll Build
        uses: actions/cache@v4
        continue-on-error: true
        id: cache-jekyll
        with:
          path: _site
          key: ${{ runner.os }}-jekyll-${{ hashFiles('**/*.html', '**/*.md') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-
      - name: Log Cache Error
        if: steps.cache-jekyll.outcome == 'failure'
        run: |
          echo "Jekyll Cache failed with error:" >> cache-error.log
          echo "Step outcome: ${{ steps.cache-jekyll.outcome }}" >> cache-error.log
          echo "Timestamp: $(date)" >> cache-error.log
          cat cache-error.log
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
        continue-on-error: false
        id: build-jekyll
      - name: Log Jekyll Build Error
        if: failure() && steps.build-jekyll.outcome == 'failure'
        run: |
          echo "Jekyll Build failed with error:" >> jekyll-build-error.log
          echo "Step outcome: ${{ steps.build-jekyll.outcome }}" >> jekyll-build-error.log
          echo "Timestamp: $(date)" >> jekyll-build-error.log
          if [ -f "_site/jekyll-build.log" ]; then
            echo "Jekyll build log:" >> jekyll-build-error.log
            cat "_site/jekyll-build.log" >> jekyll-build-error.log
          fi
          cat jekyll-build-error.log
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        continue-on-error: true
        id: upload-artifact
      - name: Log Upload Error
        if: steps.upload-artifact.outcome == 'failure'
        run: |
          echo "Upload Artifact failed with error:" >> upload-error.log
          echo "Step outcome: ${{ steps.upload-artifact.outcome }}" >> upload-error.log
          echo "Timestamp: $(date)" >> upload-error.log
          cat upload-error.log
      - name: Post Error Logs to Commit Comment
        if: always()
        run: |
          # 收集所有错误日志
          ERROR_LOGS=""

          if [ -f "setup-pages-error.log" ]; then
            ERROR_LOGS="${ERROR_LOGS}## Setup Pages Error\n\`\`\`\n$(cat setup-pages-error.log)\n\`\`\`\n\n"
          fi
          if [ -f "cache-error.log" ]; then
            ERROR_LOGS="${ERROR_LOGS}## Jekyll Cache Error\n\`\`\`\n$(cat cache-error.log)\n\`\`\`\n\n"
          fi
          if [ -f "jekyll-build-error.log" ]; then
            ERROR_LOGS="${ERROR_LOGS}## Jekyll Build Error\n\`\`\`\n$(cat jekyll-build-error.log)\n\`\`\`\n\n"
          fi
          if [ -f "upload-error.log" ]; then
            ERROR_LOGS="${ERROR_LOGS}## Upload Artifact Error\n\`\`\`\n$(cat upload-error.log)\n\`\`\`\n\n"
          fi

          # 如果有错误日志，发布到 commit comment
          if [ -n "$ERROR_LOGS" ]; then
            COMMENT_BODY="# GitHub Actions Build Errors - $(date '+%Y-%m-%d %H:%M:%S')\n\n${ERROR_LOGS}"

            # 使用 GitHub API 发布 commit comment
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments" \
              -d "{\"body\": \"$(echo -e "$COMMENT_BODY" | sed 's/"/\\"/g' | tr '\n' '\\' | sed 's/\\/\\n/g')\"}"
          else
            echo "No error logs to post"
          fi

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true
      - name: Log Deploy Error
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "Deploy to GitHub Pages failed with error:" >> deploy-error.log
          echo "Step outcome: ${{ steps.deployment.outcome }}" >> deploy-error.log
          echo "Timestamp: $(date)" >> deploy-error.log
          cat deploy-error.log
      - name: Post Deploy Error to Commit Comment
        if: always()
        run: |
          # 收集部署错误日志
          if [ -f "deploy-error.log" ]; then
            COMMENT_BODY="# GitHub Pages Deploy Error - $(date '+%Y-%m-%d %H:%M:%S')\n\n## Deploy Error\n\`\`\`\n$(cat deploy-error.log)\n\`\`\`"

            # 使用 GitHub API 发布 commit comment
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments" \
              -d "{\"body\": \"$(echo -e "$COMMENT_BODY" | sed 's/"/\\"/g' | tr '\n' '\\' | sed 's/\\/\\n/g')\"}"
          else
            echo "No deploy error logs to post"
          fi
